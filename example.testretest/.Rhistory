load("~/Desktop/NeuroHack/neuropointillist/example.testretestFE/testretestFE/debug.Rdata")
model1designmat <- readRDS("~/Desktop/NeuroHack/neuropointillist/example.testretestFE/testretestFE/model1designmat.rds")
View(model1designmat)
model10001 <- readRDS("~/Desktop/NeuroHack/neuropointillist/example.testretestFE/testretestFE/model10001.rds")
head(model10001)
clc
``
processVoxel <-function(v) {
Y <- voxeldat[,v]
e <- try(mod <- lm(Y ~ task, na.action=na.omit))
if(inherits(e, "try-error")) {
mod <- NULL
}
if(!is.null(mod)) {
contr <- c(0, 1)
statSumm <- summary(mod)
coeffSumm <- statSumm$coefficients
coeffSumm <- data.frame(coeffSumm)
t.stat <- coeffSumm$t.value[2]
p <- coeffSumm$Pr...t..[2]
retvals <- list(t.stat)
} else {
# If we are returning 4 dimensional data, we need to be specify how long
# the array will be in case of errors
retvals <- list(999,999,999,999)
}
names(retvals) <- c("tstat-Task")
retvals
}
processVoxel(1)
load("~/Desktop/NeuroHack/neuropointillist/example.testretestFE/testretestFE/debug.Rdata")
processVoxel(1)
voxeldat[,1]
processVoxel(1)
processVoxel(2)
v = 2
Y <- voxeldat[,v]
e <- try(mod <- lm(Y ~ task, na.action=na.omit))
if(inherits(e, "try-error")) {
mod <- NULL
}
if(!is.null(mod)) {
contr <- c(0, 1)
statSumm <- summary(mod)
coeffSumm <- statSumm$coefficients
coeffSumm <- data.frame(coeffSumm)
t.stat <- coeffSumm$t.value[2]
p <- coeffSumm$Pr...t..[2]
retvals <- list(t.stat)
} else {
# If we are returning 4 dimensional data, we need to be specify how long
# the array will be in case of errors
retvals <- list(999,999,999,999)
}
names(retvals) <- c("tstat-Task")
retvals
Y
mod
e <- try(mod <- lm(Y ~ task, na.action=na.omit))
if(inherits(e, "try-error")) {
mod <- NULL
}
attach(designmat)
processVoxel(1)
revals
retvals
load("/Users/rosa/Desktop/NeuroHack/neuropointillist/example.rawfmri/sgedata/debug.Rdata")
View(designmat)
attach(designmat)
View(mask.arrayindices)
imagecoordtovertex(22,26,4)
v <- imagecoordtovertex(22,26,4)
Y <- voxeldat[,v]
e <- try(mod <- lme(Y ~ High+Low, random=~1|subject, method=c("ML"), na.action=na.omit, corr=corAR1(form=~1|subject), control=lmeControl(returnObject=TRUE,singular.ok=TRUE)))
# This model is written so that errors are appropriately trapped and
#handled when running
# using a shared memory multiprocessor
library(nlme)
e <- try(mod <- lme(Y ~ High+Low, random=~1|subject, method=c("ML"), na.action=na.omit, corr=corAR1(form=~1|subject), control=lmeControl(returnObject=TRUE,singular.ok=TRUE)))
e
mod
if(!is.null(mod)) {
contr <- c(0, 1,-1)
out <- anova(mod,L=contr)
t.stat <- (t(contr)%*%mod$coefficients$fixed)/sqrt(t(contr)%*%vcov(mod)%*%contr)
p <- 1-pt(t.stat,df=out$denDF)
retvals <- list(summary(mod)$tTable["High", "t-value"],
summary(mod)$tTable["Low", "t-value"], t.stat, p)
} else {
# If we are returning 4 dimensional data, we need to be specify how long
# the array will be in case of errors
retvals <- list(999,999,999,999)
}
retvals
names(retvals) <- c("tstat-High", "tstat-Low", "tstat-High.gt.Low", "p-High.gt.Low")
retvals
?gsub
if (!suppressPackageStartupMessages(require(Rniftilib))) install.packages("Rniftilib", repos="http://R-Forge.R-project.org")
if (!suppressPackageStartupMessages(require(argparse))) install.packages("argparse")
if (!suppressPackageStartupMessages(require(doParallel))) install.packages("doParallel")
suppressPackageStartupMessages(library(Rniftilib))
suppressPackageStartupMessages(library(argparse))
suppressPackageStartupMessages(library(doParallel))
suppressPackageStartupMessages(library(neuropointillist))
parser <- ArgumentParser()
parser$add_argument("-m", "--mask",  nargs=1, help="Maskfile to process", required=TRUE)
parser$add_argument("-m", "--mask",  nargs=1, help="Maskfile to process", required=TRUE)
parser$add_argument("-d", "--designmat",  nargs=1, help="Design matrix in RDS format", required=TRUE)
parser$add_argument("--model", nargs=1, help="R code that defines the voxelwise-model and any initialization", required=TRUE)
#cmdargs <- c("-m", "fl.0078.nii.gz", "--model", "model.R", "-d", "designmat.rds")
args <- parser$parse_args()
cmdargs <- c("-m","test_mask.nii.gz", "--set1", "setfilenames1.txt",
"--set2", "setfilenames2.txt",
"--setlabels1", "setlabels1.csv",
"--setlabels2", "setlabels2.csv",
"--model", "fmrimodel.R",
"--output", "testretestRM/model1",
"--debug", "debug.Rdata",
"--sgeN", "1")
parser <- ArgumentParser()
parser$add_argument("-m", "--mask",  nargs=1, help="Maskfile to process", required=TRUE)
parser$add_argument("-d", "--designmat",  nargs=1, help="Design matrix in RDS format", required=TRUE)
parser$add_argument("--model", nargs=1, help="R code that defines the voxelwise-model and any initialization", required=TRUE)
args <- parser$parse_args()
args <- parser$parse_args(cmdargs)
cmdargs
cmdargs <- c("-m", "test_mask.nii.gz", "--model", "model.R", "-d", "designmat.rds")
args <- parser$parse_args()
args <- parser$parse_args(cmdargs)
maskfile <- args$mask
mask.vector <- as.vector(mask[,,])
mask.vertices <- which(mask.vector > 0)
nvertices <- length(mask.vertices)
mask <- nifti.image.read(maskfile);
mask.vector <- as.vector(mask[,,])
mask.vertices <- which(mask.vector > 0)
nvertices <- length(mask.vertices)
mask
nvertices
?source
args$model
args$model <- fmrimodel.R
args$model <- "fmrimodel.R"
source(modelfile)
modelfile
modelfile <- args$model
source(modelfile)
designmat <- readRDS(args$designmat)
designmat
load("/Users/rosa/Desktop/NeuroHack/neuropointillist/example.testretest/testretestRM/debug.Rdata")
attach(designmat)
voxelfile <- gsub(".nii.gz", ".rds", args$mask)
voxelfile
voxeldat <- readRDS(voxelfile)
stopifnot(dim(voxeldat)[1] == dim(designmat)[1])
voxelfile
maskfile <- args$mask
mask <- nifti.image.read(maskfile);
mask
voxeldat <- readRDS(voxelfile)
mask.vector <- as.vector(mask[,,])
mask.vertices <- which(mask.vector > 0)
nvertices <- length(mask.vertices)
nvertices
View(designmat)
processVoxel()
system.time(results <-sapply(1:nvertices, processVoxel))
results
dim(voxeldat)
dim(designmat)
nvertices
dim(results)
size(results)
length(results)
dim(prefix)
prefix
prefix <- gsub(".nii.gz","", args$mask)
prefix
mask
dim(mask)
48*58*49
# make sure that any directory specified by prefix exists
dir <- dirname(prefix)
names <- attributes(results[,1])$names
results[,1]
results
results[1]
attributes(results)
attributes(results[1])
Y
mod
p <- 1-pt(t.stat,df=out$denDF)
p
summary(mod)
Y
mod
attach(designmat)
Y <- voxeldat[,v]
Y
dim(Y)
size(Y)
length(Y)
e <- try(mod <- lme(Y ~ task, random=~1|sub, method=c("ML"), na.action=na.omit, corr=corAR1(form=~1|sub), control=lmeControl(returnObject=TRUE,singular.ok=TRUE)))
e
t.stat <- (t(contr)%*%mod$coefficients$fixed)/sqrt(t(contr)%*%vcov(mod)%*%contr)
contr <- c(0, 1)
out <- anova(mod,L=contr)
t.stat <- (t(contr)%*%mod$coefficients$fixed)/sqrt(t(contr)%*%vcov(mod)%*%contr)
t.stat
p <- 1-pt(t.stat,df=out$denDF)
p
contr <- c(0, 1)
out <- anova(mod,L=contr)
t.stat <- (t(contr)%*%mod$coefficients$fixed)/sqrt(t(contr)%*%vcov(mod)%*%contr)
p <- 1-pt(t.stat,df=out$denDF)
retvals <- list(summary(mod)$tTable["task", "t-value"], p)
retvals
names(retvals) <- c("tstat-task", "p-task")
retvals
results
size(results)
dim(results)
length(results)
length(retvals)
dim(retvals)
contr <- c(0, 1)
statSumm <- summary(mod)
coeffSumm <- statSumm$coefficients
coeffSumm <- data.frame(coeffSumm)
t.stat <- coeffSumm$t.value[2]
p <- coeffSumm$Pr...t..[2]
retvals <- list(t.stat,p)
